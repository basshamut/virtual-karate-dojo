name: Virtual Dojo Deploy

# Controls when the action will run.
on:
  push:
    branches: [ main ]

# A workflow run is made up of one or more jobs that can run sequentially o en paralelo
jobs:
  build:
    # El tipo de runner que el trabajo usará
    runs-on: ubuntu-latest

    # Los pasos representan una secuencia de tareas que se ejecutarán como parte del trabajo
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '22'  # O la versión que uses

      - name: Install dependencies for frontend
        run: |
          npm run install:frontend 

      - name: Build frontend
        run: |
          npm run build:frontend

      - name: Install dependencies for backend
        run: |
          npm run install:backend

      - name: Install sshpass
        run: sudo apt-get install -y sshpass

      - name: Deploy to VPS
        # Variables de entorno
        env:
          SSH_HOST: ${{ secrets.VPS_SSH_HOST }}
          SSH_USERNAME: ${{ secrets.VPS_SSH_USERNAME }}
          SSH_PASSWORD: ${{ secrets.VPS_SSH_PASSWORD }}
          FRONTEND_API_URL: ${{ secrets.FRONTEND_API_URL }}
          PORT: ${{ secrets.PORT }}
          DATA_BASE_URL: ${{ secrets.DATA_BASE_URL }}
          FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
          VITE_API_URL: ${{ secrets.VITE_API_URL }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
        run: |
          # Crear directorios en el VPS
          sshpass -p "${SSH_PASSWORD}" ssh -o StrictHostKeyChecking=no "${SSH_USERNAME}@${SSH_HOST}" 'mkdir -p /var/www/html/virtual-dojo/frontend /var/www/html/virtual-dojo/backend'

          # Copiar el build del frontend al VPS
          rsync -avz --delete -e "sshpass -p '${SSH_PASSWORD}' ssh -o StrictHostKeyChecking=no" frontend/dist/ "${SSH_USERNAME}@${SSH_HOST}:/var/www/html/virtual-dojo/frontend"

          # Crear el archivo .env para el frontend
          sshpass -p "${SSH_PASSWORD}" ssh -o StrictHostKeyChecking=no "${SSH_USERNAME}@${SSH_HOST}" <<EOF
            echo "VITE_API_URL=${VITE_API_URL}" > /var/www/html/virtual-dojo/frontend/.env
          EOF

          # Copiar el backend al VPS
          rsync -avz --delete -e "sshpass -p '${SSH_PASSWORD}' ssh -o StrictHostKeyChecking=no" backend/ "${SSH_USERNAME}@${SSH_HOST}:/var/www/html/virtual-dojo/backend"

          # Crear el archivo .env para el backend
          sshpass -p "${SSH_PASSWORD}" ssh -o StrictHostKeyChecking=no "${SSH_USERNAME}@${SSH_HOST}" <<EOF
            echo "PORT=${PORT}" > /var/www/html/virtual-dojo/backend/.env
            echo "DATA_BASE_URL=${DATA_BASE_URL}" >> /var/www/html/virtual-dojo/backend/.env
            echo "FRONTEND_URL=${FRONTEND_URL}" >> /var/www/html/virtual-dojo/backend/.env
            echo "STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}" >> /var/www/html/virtual-dojo/backend/.env
          EOF          
          # Conectar al VPS y reiniciar el backend
          sshpass -p "${SSH_PASSWORD}" ssh -o StrictHostKeyChecking=no "${SSH_USERNAME}@${SSH_HOST}" << 'EOF'
            cd /var/www/html/virtual-dojo/backend
            npm install pm2 -g
            npm install --only=prod
            pm2 restart all || pm2 start server.js --name virtual-dojo
            exit
          EOF